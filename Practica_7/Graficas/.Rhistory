#png(paste("p7_", tmax, ".png", sep=""), width=700, height=300)
#plot(x, y, type="l", main=paste(tmax, "pasos"))
#  valores <- g(resultados[1],resultados[2])
#points(resultados, valores, pch=16, col="red")
#  mejor <- which.max(valores)
#abline(v = resultados[mejor], col="green", lwd=3)
#graphics.off()
#}
#stopImplicitCluster()
resultados
resultados <-parSapply(cluster, rep(tmax,replicas ), replica)
replicas<-100
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
resultados <-parSapply(cluster, rep(tmax,replicas ), replica)
stopCluster(cluster)
resultados
temp <- seq(-pi, 0, length = 50)
x <- c(rep(1, 50) %*% t(cos(temp)))
y <- c(cos(temp) %*% t(sin(temp)))
z <- c(sin(temp) %*% t(sin(temp)))
scatterplot3d(x, y, z, highlight.3d=TRUE,
col.axis="blue", col.grid="lightblue",
main="scatterplot3d - 2", pch=20)
###################### GRAFICA ##########################################################
data(trees)
s3d <- scatterplot3d(trees, type="h", highlight.3d=TRUE,
angle=55, scale.y=0.7, pch=16, main="scatterplot3d - 5")
# Now adding some points to the "scatterplot3d"
s3d$points3d(seq(10,20,2), seq(85,60,-5), seq(60,10,-10),
col="blue", type="h", pch=16)
# Now adding a regression plane to the "scatterplot3d"
attach(trees)
my.lm <- lm(Volume ~ Girth + Height)
s3d$plane3d(my.lm, lty.box = "solid")
x
y
z
plot3d(x,y,z)
g <- function(x, y) {
return(((x + 0.5)^4 - 30 * x^2 - 20 * x + (y + 0.5)^4 - 30 * y^2 - 20 * y)/100)
}
x <- seq(-6, 5, 0.25)
y<-x
low <- -6
high <- 5
tmax <- 100
step <- 0.3
replica <- function(t) {
x <- runif(1, low, high)
y <- runif(1, low, high)
bestpos <- c(x, y)
bestval <- g(x, y)
trayectoria = c(bestval)
for (tiempo in 1:t) {
d <- runif(1, 0, step)
op = c(x - d, y, x + d, y, x, y - d, x, y + d)
posibles = numeric()
for (i in 1:4) {
posibles <- c(posibles, g(op[2*i - 1], op[2*i]))
}
mejor <- which.max(posibles)
nuevo = posibles[mejor]
x<-op[2*mejor - 1]
y<-op[2*mejor]
if((x<= high & y <= high) & ( x>= low & y>= low)){
if (nuevo > bestval) { # minimizamos
bestpos <- c(op[(2*mejor - 1) ],op[2*mejor])
bestval <- nuevo
}
trayectoria <- c(trayectoria, bestval)
}else {
x <- runif(1, low, high)
y <- runif(1, low, high)
}
}
return(bestpos)
}
#suppressMessages(library(doParallel))
#registerDoParallel(makeCluster(detectCores() - 1))
#x <- seq(low, high, length.out=500)
#y <- foreach(i = x, .combine=c) %dopar% g(i,i)
replicas<-100
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
#clusterExport(cluster, "tmax")
resultados <-parSapply(cluster, rep(tmax,replicas ), replica)
stopCluster(cluster)
z <- outer(x, y, g)
x
y
z <- outer(x, y, g)
plot3d(x,y,z)
plot3d(x,y,z)
x
y
z <- outer(x, y, g)
z
plot3d(x,y,z)
persp(x, y, z, shade=0.2, col='orange', theta=40, phi=30)
persp3d(x,y,z)
persp3d(x,y,z, col="orange")
persp3d(x,y,z, col=rainbow(15))
persp3d(x,y,z, col='orange')
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_7/Graficas")
#file.remove(list.files(pattern=".png"))
rm(list=ls())
library(parallel)
library(rgl)
g <- function(x, y) {
return(((x + 0.5)^4 - 30 * x^2 - 20 * x + (y + 0.5)^4 - 30 * y^2 - 20 * y)/100)
}
x <- seq(-6, 5, 0.25)
y<-x
low <- -6
high <- 5
t <- 100
step <- 0.1
tempe<-12
replica <- function(j) {
x <- runif(1, low, high)
y <- runif(1, low, high)
bestpos <- c(x, y)
bestval <- g(x, y)
trayectoria = c(bestval)
camino = c(x, y)
actual<-c(x,y)
mejor<-bestval
for (tiempo in 1:t) {
d <- runif(1, 0, step)
op = c( max(x - d,low), y, min(x + d, high), y, x,max(y - d,low) , x,min( y + d, high))
posibles = numeric()
for (i in 1:4) {
posibles <- c(posibles, g(op[2*i - 1], op[2*i]))
}
aux<-floor(runif(1, min=1,max=length(posibles)))
aux1<-posibles[aux]
delta<-aux1-g(actual[1],actual[2] )
if(delta>0){
mejor<-posibles[posibles==aux1]
actual<- c(op[2*mejor - 1],op[2*mejor])
} else if ( runif(1)<exp(delta/tempe) ) {
actual<-c(op[2*aux - 1],op[2*aux])
tempe<-tempe*0.995
}
nuevo = posibles[mejor]
x<-actual[1]
y<-actual[2]
trayectoria <- c(trayectoria, bestval)
camino = c(camino, x, y)
}
return(camino)
}
replicas<-5
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
clusterExport(cluster, "t")
clusterExport(cluster, "tempe")
dat<-data.frame()
resultados <-parSapply(cluster, 1:replicas, replica)
dat<-rbind(dat,t(resultados))
stopCluster(cluster)
View(dat)
dat<-rbind(dat,(resultados))
dat<-data.frame()
dat<-rbind(dat,(resultados))
replicas<-5
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
clusterExport(cluster, "t")
clusterExport(cluster, "tempe")
dat<-data.frame()
resultados <-parSapply(cluster, 1:replicas, replica)
dat<-rbind(dat,c,(resultados, tempe)  )
stopCluster(cluster)
replica <- function(j) {
x <- runif(1, low, high)
y <- runif(1, low, high)
bestpos <- c(x, y)
bestval <- g(x, y)
trayectoria = c(bestval)
camino = c(x, y)
actual<-c(x,y)
mejor<-bestval
for (tiempo in 1:t) {
d <- runif(1, 0, step)
op = c( max(x - d,low), y, min(x + d, high), y, x,max(y - d,low) , x,min( y + d, high))
posibles = numeric()
for (i in 1:4) {
posibles <- c(posibles, g(op[2*i - 1], op[2*i]))
}
aux<-floor(runif(1, min=1,max=length(posibles)))
aux1<-posibles[aux]
delta<-aux1-g(actual[1],actual[2] )
if(delta>0){
mejor<-posibles[posibles==aux1]
actual<- c(op[2*mejor - 1],op[2*mejor])
} else if ( runif(1)<exp(delta/tempe) ) {
actual<-c(op[2*aux - 1],op[2*aux])
tempe<-tempe*0.995
}
nuevo = posibles[mejor]
x<-actual[1]
y<-actual[2]
trayectoria <- c(trayectoria, bestval)
camino = c(camino, x, y, tempe )
}
return(camino)
}
replicas<-5
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
clusterExport(cluster, "t")
clusterExport(cluster, "tempe")
resultados <-parSapply(cluster, 1:replicas, replica)
dat<-rbind(dat,c,(resultados)  )
View(resultados)
resultados[resultados>2]
dat1<-resultados[resultados>2]
plot(dat1[1:302],col=3)
plot(dat1,col=3)
plot(dat1,col=3,xlab="", ylab="Temperatura")
replicas<-20
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
clusterExport(cluster, "t")
clusterExport(cluster, "tempe")
dat<-data.frame()
resultados <-parSapply(cluster, 1:replicas, replica)
dat<-rbind(dat,c,(resultados)  )
stopCluster(cluster)
dat1<-resultados[resultados>2]
plot(dat1,col=3,xlab="", ylab="Temperatura")
dat1<-resultados[resultados>6]
plot(dat1,col=3,xlab="", ylab="Temperatura")
replicas<-5
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
clusterExport(cluster, "t")
clusterExport(cluster, "tempe")
dat<-data.frame()
resultados <-parSapply(cluster, 1:replicas, replica)
dat<-rbind(dat,c,(resultados)  )
stopCluster(cluster)
dat1<-resultados[resultados>6]
plot(dat1,col=3,xlab="", ylab="Temperatura")
plot(dat1[1:100],col=1,xlab="", ylab="Temperatura", xlim=c(0, t*replicas))
plot(dat1[1:100],col=1,xlab="", ylab="Temperatura", xlim=c(0, t*replicas), type="l")
lines(dat[t+1,t*2], col=2 )
lines(dat[t+1:2*t], col=2 )
lines(dat[(t+1):(2*t)], col=2 )
t=100
lines(dat[(t+1):(2*t)], col=2 )
lines(dat[101:200], col=2 )
dat1<-resultados[resultados>6]
dat1<-resultados[resultados>6]
replicas<-5
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
clusterExport(cluster, "t")
clusterExport(cluster, "tempe")
dat<-data.frame()
resultados <-parSapply(cluster, 1:replicas, replica)
dat<-rbind(dat,c,(resultados)  )
stopCluster(cluster)
dat1<-resultados[resultados>6]
plot(dat1[1:100],col=1,xlab="", ylab="Temperatura", xlim=c(0, t*replicas), type="l")
lines(dat[101:200], col=2 )
lines(dat1[101:200], col=2 )
101:200
lines(dat1[101:200]~101:200 , col=2 )
lines(dat1[101:200]~[101:200] , col=2 )
xa<-101:200
lines(dat1[101:200]~xa , col=2 )
plot(dat1[1:100],col=1,xlab="", ylab="Temperatura", xlim=c(0, t*replicas), type="l")
xa<-101:200
lines(dat1[101:200]~xa , col=2 )
xa<-201:300
lines(dat1[201:300]~xa , col=3 )
plot(dat1[1:100],col=1,xlab="", ylab="Temperatura", xlim=c(0, t*replicas), type="l", ylim=c(min(dat1), max(dat1)) )
xa<-101:200
lines(dat1[101:200]~xa , col=2 )
xa<-201:300
lines(dat1[201:300]~xa , col=3 )
xa<-301:400
lines(dat1[301:400]~xa , col=4 )
t+1:t*i+t
plot(dat1[1:100],col=1,xlab="", ylab="Temperatura", xlim=c(0, t*replicas), type="l", ylim=c(min(dat1), max(dat1)) )
for(i in 1:4 ){
xa<-t+1:t*i+t
lines(dat1[t+1:t*i+t ]~xa , col=i+1 )
}
plot(dat1[1:100],col=1,xlab="", ylab="Temperatura", xlim=c(0, t*replicas), type="l", ylim=c(min(dat1), max(dat1)) )
for(i in 1:4 ){ }
xa<-101:200
lines(dat1[101:200]~xa , col=2 )
xa<-201:300
lines(dat1[201:300]~xa , col=3 )
xa<-301:400
lines(dat1[301:400]~xa , col=4 )
xa<-401:500
lines(dat1[401:500]~xa , col=4 )
plot(dat1[1:100],col=1,xlab="", ylab="Temperatura", xlim=c(0, t*replicas), type="l", ylim=c(min(dat1), max(dat1)) )
for(i in 1:4 ){ }
xa<-101:200
lines(dat1[101:200]~xa , col=2 )
xa<-201:300
lines(dat1[201:300]~xa , col=3 )
xa<-301:400
lines(dat1[301:400]~xa , col=4 )
xa<-401:500
lines(dat1[401:500]~xa , col=5 )
plot(dat1[1:100],col=1,xlab="", ylab="Temperatura", xlab="Itera * replica", xlim=c(0, t*replicas), type="l", ylim=c(min(dat1), max(dat1)) )
for(i in 1:4 ){ }
xa<-101:200
lines(dat1[101:200]~xa , col=2 )
xa<-201:300
lines(dat1[201:300]~xa , col=3 )
xa<-301:400
lines(dat1[301:400]~xa , col=4 )
xa<-401:500
lines(dat1[401:500]~xa , col=5 )
plot(dat1[1:100],col=1,xlab="", ylab="Temperatura", xlab="Itera * replica", xlim=c(0, t*replicas), type="l", ylim=c(min(dat1), max(dat1)) )
for(i in 1:4 ){ }
xa<-101:200
lines(dat1[101:200]~xa , col=2 )
xa<-201:300
lines(dat1[201:300]~xa , col=3 )
xa<-301:400
lines(dat1[301:400]~xa , col=4 )
xa<-401:500
lines(dat1[401:500]~xa , col=5 )
plot(dat1[1:100],col=1,xlab="", ylab="Temperatura", xlab="Itera * replica", xlim=c(0, t*replicas), type="l", ylim=c(min(dat1), max(dat1)) )
for(i in 1:4 ){ }
xa<-101:200
lines(dat1[101:200]~xa , col=2 )
xa<-201:300
lines(dat1[201:300]~xa , col=3 )
xa<-301:400
lines(dat1[301:400]~xa , col=4 )
xa<-401:500
lines(dat1[401:500]~xa , col=5 )
plot(dat1[1:100],col=1,xlab="", ylab="Temperatura", xlab="Itera * replica", xlim=c(0, t*replicas), type="l", ylim=c(min(dat1), max(dat1)) )
for(i in 1:4 ){ }
xa<-101:200
lines(dat1[101:200]~xa , col=2 )
xa<-201:300
lines(dat1[201:300]~xa , col=3 )
xa<-301:400
lines(dat1[301:400]~xa , col=4 )
xa<-401:500
lines(dat1[401:500]~xa , col=5 )
plot(dat1[1:100],col=1,xlab="", ylab="Temperatura", xlab="Itera * replica", xlim=c(0, t*replicas), type="l", ylim=c(min(dat1), max(dat1)) )
plot(dat1[1:100],col=1, ylab="Temperatura", xlab="Itera * replica", xlim=c(0, t*replicas), type="l", ylim=c(min(dat1), max(dat1)) )
for(i in 1:4 ){ }
xa<-101:200
lines(dat1[101:200]~xa , col=2 )
xa<-201:300
lines(dat1[201:300]~xa , col=3 )
xa<-301:400
lines(dat1[301:400]~xa , col=4 )
xa<-401:500
lines(dat1[401:500]~xa , col=5 )
rm(list=ls())
library(parallel)
library(rgl)
g <- function(x, y) {
return(((x + 0.5)^4 - 30 * x^2 - 20 * x + (y + 0.5)^4 - 30 * y^2 - 20 * y)/100)
}
x <- seq(-6, 5, 0.25)
y<-x
low <- -6
high <- 5
t <- 100
step <- 0.1
tempe<-12
replica <- function(j) {
x <- runif(1, low, high)
y <- runif(1, low, high)
bestpos <- c(x, y)
bestval <- g(x, y)
trayectoria = c(bestval)
camino = c(x, y)
actual<-c(x,y)
mejor<-bestval
for (tiempo in 1:t) {
d <- runif(1, 0, step)
op = c( max(x - d,low), y, min(x + d, high), y, x,max(y - d,low) , x,min( y + d, high))
posibles = numeric()
for (i in 1:4) {
posibles <- c(posibles, g(op[2*i - 1], op[2*i]))
}
aux<-floor(runif(1, min=1,max=length(posibles)))
aux1<-posibles[aux]
delta<-aux1-g(actual[1],actual[2] )
if(delta>0){
mejor<-posibles[posibles==aux1]
actual<- c(op[2*mejor - 1],op[2*mejor])
} else if ( runif(1)<exp(delta/tempe) ) {
actual<-c(op[2*aux - 1],op[2*aux])
tempe<-tempe*0.995
}
nuevo = posibles[mejor]
x<-actual[1]
y<-actual[2]
trayectoria <- c(trayectoria, bestval)
camino = c(camino, x, y )
}
return(camino)
}
replicas<-5
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
clusterExport(cluster, "t")
clusterExport(cluster, "tempe")
dat<-data.frame()
resultados <-parSapply(cluster, 1:replicas, replica)
dat<-rbind(dat,c,(resultados)  )
stopCluster(cluster)
replicas<-5
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
clusterExport(cluster, "t")
clusterExport(cluster, "tempe")
dat<-data.frame()
resultados <-parSapply(cluster, 1:replicas, replica)
dat<-rbind(dat,(resultados)  )
stopCluster(cluster)
replicas<-5
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
clusterExport(cluster, "t")
clusterExport(cluster, "tempe")
dat<-data.frame()
resultados <-parSapply(cluster, 1:replicas, replica)
dat<-rbind(dat,t(resultados)  )
stopCluster(cluster)
for (i in 0:t) {
png(paste("Practica7_",i,".png", sep = ""),width=500, height=500)
image(x,y,z, col=heat.colors(20)[20:1], main=paste("Iteracción ",i,sep=""   ))
contour(x,x,z,add=T, xlim=c(low,high),ylim=c(low,high))
for (j in 1:replicas){
po = dat[j,]
points(po[2*(i + 1) - 1], po[2*(i + 1)], col=j, pch=16, cex=1)
}
graphics.off()
}
library(magick)
frames=lapply(1:t,function(w) image_read(paste("Practica7_",w,".png",sep="")))
animation <- image_animate(image_join(frames),fps=4)
print(animation)
w3<-paste("P7_", replicas,".gif",sep=""  )
image_write(animation, w3 )
sapply(1:t,function(x) file.remove(paste("Practica7_",x,".png",sep="")))
View(dat)
replicas<-20
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
clusterExport(cluster, "t")
clusterExport(cluster, "tempe")
dat<-data.frame()
resultados <-parSapply(cluster, 1:replicas, replica)
dat<-rbind(dat,t(resultados)  )
stopCluster(cluster)
