bestpos <- c(op[(2*mejor - 1) ],op[2*mejor])
bestval <- nuevo
}
trayectoria <- c(trayectoria, bestval)
}else {
x <- runif(1, low, high)
y <- runif(1, low, high)
}
}
return(bestpos)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
x <- seq(low, high, length.out=500)
#y <- foreach(i = x, .combine=c) %dopar% g(i,i)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
#clusterExport(cluster, "tmax")
resultados <-parSapply(cluster, rep(tmax,replicas ), replica)
stopCluster(cluster)
resultados
# for (pot in 2:4) {
#  replicas<-100
#  tmax <- 10^pot
#  resultados <- foreach(i = 1:replicas, .combine=rbind) %dopar% replica(tmax)
#png(paste("p7_", tmax, ".png", sep=""), width=700, height=300)
#plot(x, y, type="l", main=paste(tmax, "pasos"))
#  valores <- g(resultados[1],resultados[2])
#points(resultados, valores, pch=16, col="red")
#  mejor <- which.max(valores)
#abline(v = resultados[mejor], col="green", lwd=3)
#graphics.off()
#}
#stopImplicitCluster()
resultados
resultados <-parSapply(cluster, rep(tmax,replicas ), replica)
replicas<-100
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
resultados <-parSapply(cluster, rep(tmax,replicas ), replica)
stopCluster(cluster)
resultados
temp <- seq(-pi, 0, length = 50)
x <- c(rep(1, 50) %*% t(cos(temp)))
y <- c(cos(temp) %*% t(sin(temp)))
z <- c(sin(temp) %*% t(sin(temp)))
scatterplot3d(x, y, z, highlight.3d=TRUE,
col.axis="blue", col.grid="lightblue",
main="scatterplot3d - 2", pch=20)
###################### GRAFICA ##########################################################
data(trees)
s3d <- scatterplot3d(trees, type="h", highlight.3d=TRUE,
angle=55, scale.y=0.7, pch=16, main="scatterplot3d - 5")
# Now adding some points to the "scatterplot3d"
s3d$points3d(seq(10,20,2), seq(85,60,-5), seq(60,10,-10),
col="blue", type="h", pch=16)
# Now adding a regression plane to the "scatterplot3d"
attach(trees)
my.lm <- lm(Volume ~ Girth + Height)
s3d$plane3d(my.lm, lty.box = "solid")
x
y
z
plot3d(x,y,z)
g <- function(x, y) {
return(((x + 0.5)^4 - 30 * x^2 - 20 * x + (y + 0.5)^4 - 30 * y^2 - 20 * y)/100)
}
x <- seq(-6, 5, 0.25)
y<-x
low <- -6
high <- 5
tmax <- 100
step <- 0.3
replica <- function(t) {
x <- runif(1, low, high)
y <- runif(1, low, high)
bestpos <- c(x, y)
bestval <- g(x, y)
trayectoria = c(bestval)
for (tiempo in 1:t) {
d <- runif(1, 0, step)
op = c(x - d, y, x + d, y, x, y - d, x, y + d)
posibles = numeric()
for (i in 1:4) {
posibles <- c(posibles, g(op[2*i - 1], op[2*i]))
}
mejor <- which.max(posibles)
nuevo = posibles[mejor]
x<-op[2*mejor - 1]
y<-op[2*mejor]
if((x<= high & y <= high) & ( x>= low & y>= low)){
if (nuevo > bestval) { # minimizamos
bestpos <- c(op[(2*mejor - 1) ],op[2*mejor])
bestval <- nuevo
}
trayectoria <- c(trayectoria, bestval)
}else {
x <- runif(1, low, high)
y <- runif(1, low, high)
}
}
return(bestpos)
}
#suppressMessages(library(doParallel))
#registerDoParallel(makeCluster(detectCores() - 1))
#x <- seq(low, high, length.out=500)
#y <- foreach(i = x, .combine=c) %dopar% g(i,i)
replicas<-100
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
#clusterExport(cluster, "tmax")
resultados <-parSapply(cluster, rep(tmax,replicas ), replica)
stopCluster(cluster)
z <- outer(x, y, g)
x
y
z <- outer(x, y, g)
plot3d(x,y,z)
plot3d(x,y,z)
x
y
z <- outer(x, y, g)
z
plot3d(x,y,z)
persp(x, y, z, shade=0.2, col='orange', theta=40, phi=30)
persp3d(x,y,z)
persp3d(x,y,z, col="orange")
persp3d(x,y,z, col=rainbow(15))
persp3d(x,y,z, col='orange')
library(magick)
frames=lapply(1:t,function(w) image_read(paste("Practica7_",w,".png",sep="")))
t <- 100
frames=lapply(1:t,function(w) image_read(paste("Practica7_",w,".png",sep="")))
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_7/Graficas")
frames=lapply(1:t,function(w) image_read(paste("Practica7_",w,".png",sep="")))
animation <- image_animate(image_join(frames),fps=4)
print(animation)
w3<-paste("P7_", replicas,".gif",sep=""  )
image_write(animation, w3 )
sapply(r1,function(x) file.remove(paste("Practica7_",x,".png",sep="")))
sapply(1:t,function(x) file.remove(paste("Practica7_",x,".png",sep="")))
m <- ggplot( aes(x, y))
library(ggplot2)
m <- ggplot( aes(x, y))
ggplot( aes(x, y))
m <- ggplot(dat, aes(x, y))
ggplot()
+geom_contour(aes(z=z))
ggplot()
+geom_contour(aes(z=z))
ggplot()+geom_contour(aes(z=z))
posibles[runif(1)]
posibles<-c(2,2,3,4,5)
aux<-posibles[runif(1, min=1,max=length(posibles))]
aux
runif(1, min=1,max=length(posibles))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
floor(runif(1, min=1,max=length(posibles)))
aux<-posibles[floor(runif(1, min=1,max=length(posibles)))]
aux
aux
aux
aux
aux
aux
aux
aux
aux
aux
aux
aux
aux
aux
aux
aux
aux
aux
aux
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
if (  exp(-mejor/tempe) )
}
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
print(aux<-posibles[floor(runif(1, min=1,max=length(posibles)))])
floor(runif(1, min=1,max=length(posibles)))
aux1<-floor(runif(1, min=1,max=length(posibles)))
print(aux<-posibles[aux1])
aux1<-floor(runif(1, min=1,max=length(posibles)))
print(aux<-posibles[aux1])
aux1<-floor(runif(1, min=1,max=length(posibles)))
print(aux<-posibles[aux1])
aux1<-floor(runif(1, min=1,max=length(posibles)))
print(aux<-posibles[aux1])
aux1<-floor(runif(1, min=1,max=length(posibles)))
print(aux<-posibles[aux1])
aux1<-floor(runif(1, min=1,max=length(posibles)))
print(aux<-posibles[aux1])
aux1<-floor(runif(1, min=1,max=length(posibles)))
print(aux<-posibles[aux1])
aux1<-floor(runif(1, min=1,max=length(posibles)))
print(aux<-posibles[aux1])
aux1<-floor(runif(1, min=1,max=length(posibles)))
print(aux<-posibles[aux1])
aux1<-floor(runif(1, min=1,max=length(posibles)))
print(aux<-posibles[aux1])
aux1<-floor(runif(1, min=1,max=length(posibles)))
print(aux<-posibles[aux1])
aux1<-floor(runif(1, min=1,max=length(posibles)))
print(aux<-posibles[aux1])
aux1
print(aux<-posibles[aux1])
posibles[1]
posibles[3]
posibles<-c(2,2.2,3.5,4.8,5)
aux1<-floor(runif(1, min=1,max=length(posibles)))
print(aux<-posibles[aux1])
aux1<-posibles[aux]
aux1
which.max(posibles)
aux1==max(posibles)
mejor<-which(aux1)
which(aux1, arr.ind = TRUE)
mejor<-which(aux1, max)
aux1==max(posibles)
mejor<-which(aux1, aux1==max(posibles))
mejor<-which(aux1,max(posibles) )
aux1==max(posibles)
aux1<-posibles[5]
aux1==max(posibles)
mejor<-which(aux1)
if( aux1==max(posibles)){
mejor<-which(aux1)
}
mejor<-which.max(aux1)
mejor
aux1
max(posibles)
posibles[posible==aux1]
posibles[posibles==aux1]
which.max(posibles)
posibles[mejor]
posibles[5]
which.max(posibles)
posibles[mejor]
mejor <- which.max(posibles)
posibles[mejor]
mejor
tempe<-100
runif(1)
runif(1)>exp(-mejor/tempe)
runif(1)>exp(-mejor/tempe)
runif(1)>exp(-mejor/tempe)
runif(1)>exp(-mejor/tempe)
runif(1)>exp(-mejor/tempe)
runif(1)>exp(-mejor/tempe)
runif(1)>exp(-mejor/tempe)
runif(1)>exp(-mejor/tempe)
runif(1)>exp(-mejor/tempe)
runif(1)>exp(-mejor/tempe)
runif(1)>exp(-mejor/tempe)
runif(1)>exp(-mejor/tempe)
low <- -6
high <- 5
t <- 100
step <- 0.1
tempe<-100
x <- runif(1, low, high)
y <- runif(1, low, high)
bestpos <- c(x, y)
bestval <- g(x, y)
trayectoria = c(bestval)
camino = c(x, y)
d <- runif(1, 0, step)
op = c(x - d, y, x + d, y, x, y - d, x, y + d)
posibles = numeric()
for (i in 1:4) {
posibles <- c(posibles, g(op[2*i - 1], op[2*i]))
}
aux<-floor(runif(1, min=1,max=length(posibles)))
aux1<-posibles[aux]
if( aux1==max(posibles)){
mejor<-posibles[posibles==aux1]
}else if (runif(1)>exp(-mejor/tempe)) {
mejor<-posibles[posibles==aux1]
tempe<-tempe*0.01
}
mejor
x<-op[2*mejor - 1]
y<-op[2*mejor]
x
y
mejor <- which.max(posibles)
x<-op[2*mejor - 1]
y<-op[2*mejor]
x
y
(aux1==max(posibles)
9
aux1==max(posibles)
aux1==max(posibles)
aux1==max(posibles)
aux1==max(posibles)
aux1==max(posibles)
aux1==max(posibles)
aux1==max(posibles)
aux1==max(posibles)
x <- runif(1, low, high)
y <- runif(1, low, high)
bestpos <- c(x, y)
bestval <- g(x, y)
trayectoria = c(bestval)
camino = c(x, y)
for (tiempo in 1:t) {
d <- runif(1, 0, step)
op = c(x - d, y, x + d, y, x, y - d, x, y + d)
posibles = numeric()
for (i in 1:4) {
posibles <- c(posibles, g(op[2*i - 1], op[2*i]))
}
#posibles<-c(2,2.2,3.5,4.8,5)
aux<-floor(runif(1, min=1,max=length(posibles)))
aux1<-posibles[aux]
if(aux1==max(posibles)){
mejor<-posibles[posibles==aux1]
}else if (runif(1)>exp(-mejor/tempe)) {
mejor<-posibles[posibles==aux1]
tempe<-tempe*0.01
}
x<-op[2*mejor - 1]
y<-op[2*mejor]
if((x<= high & y <= high) & ( x>= low & y>= low)){
if (nuevo > bestval) { # minimizamos
bestpos <- c(op[(2*mejor - 1) ],op[2*mejor])
bestval <- nuevo
}
trayectoria <- c(trayectoria, bestval)
}else {
x <- runif(1, low, high)
y <- runif(1, low, high)
}
camino = c(camino, x, y)
}
x <- runif(1, low, high)
y <- runif(1, low, high)
bestpos <- c(x, y)
bestval <- g(x, y)
trayectoria = c(bestval)
camino = c(x, y)
for (tiempo in 1:t) {
d <- runif(1, 0, step)
op = c(x - d, y, x + d, y, x, y - d, x, y + d)
posibles = numeric()
for (i in 1:4) {
posibles <- c(posibles, g(op[2*i - 1], op[2*i]))
}
#posibles<-c(2,2.2,3.5,4.8,5)
aux<-floor(runif(1, min=1,max=length(posibles)))
aux1<-posibles[aux]
if(aux1==max(posibles)){
mejor<-posibles[posibles==aux1]
}else if (runif(1)>exp(-mejor/tempe)) {
mejor<-posibles[posibles==aux1]
tempe<-tempe*0.01
}
nuevo = posibles[mejor]
x<-op[2*mejor - 1]
y<-op[2*mejor]
if((x<= high & y <= high) & ( x>= low & y>= low)){
if (nuevo > bestval) { # minimizamos
bestpos <- c(op[(2*mejor - 1) ],op[2*mejor])
bestval <- nuevo
}
trayectoria <- c(trayectoria, bestval)
}else {
x <- runif(1, low, high)
y <- runif(1, low, high)
}
camino = c(camino, x, y)
}
}
x <- runif(1, low, high)
y <- runif(1, low, high)
bestpos <- c(x, y)
bestval <- g(x, y)
trayectoria = c(bestval)
camino = c(x, y)
for (tiempo in 1:t) {
d <- runif(1, 0, step)
op = c(x - d, y, x + d, y, x, y - d, x, y + d)
posibles = numeric()
for (i in 1:4) {
posibles <- c(posibles, g(op[2*i - 1], op[2*i]))
}
#posibles<-c(2,2.2,3.5,4.8,5)
aux<-floor(runif(1, min=1,max=length(posibles)))
aux1<-posibles[aux]
if(aux1==max(posibles)){
mejor<-posibles[posibles==aux1]
}else if (runif(1)>exp(-mejor/tempe)) {
mejor<-posibles[posibles==aux1]
tempe<-tempe*0.01
}
nuevo = posibles[mejor]
x<-op[2*mejor - 1]
y<-op[2*mejor]
if((x<= high & y <= high) & ( x>= low & y>= low)){
if (nuevo > bestval) { # minimizamos
bestpos <- c(op[(2*mejor - 1) ],op[2*mejor])
bestval <- nuevo
}
trayectoria <- c(trayectoria, bestval)
}else {
x <- runif(1, low, high)
y <- runif(1, low, high)
}
camino = c(camino, x, y)
}
camino
