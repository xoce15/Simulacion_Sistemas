pta<-table(p)
pta
asig<-vector()
datos<-read.csv("producciones.csv",header = T,sep = ",")
datos
n_municipios<-dim(datos)[1]
#file.remove(list.files(pattern=".png"))
#rm(list=ls())
#gc(TRUE)
library("testit")
library(parallel)
library(sna)
library(magick)
#setwd("C:/Users/ASUS/Dropbox/laxtex/tablas")
setwd("C:/Users/Z230/Dropbox/Alex_tesis/tablas")
datos<-read.csv("producciones.csv",header = T,sep = ",")
datos
n_municipios<-dim(datos)[1]
dias_ciclo<-as.numeric(as.Date("2015-6-30")-as.Date("2014-06-30"))+1
inicio_ciclo<-as.Date("2014-06-30")
m_producciones<-matrix(nrow = n_municipios,ncol=dias_ciclo)
dias<-1:dias_ciclo
#datos$A_2014<-as.numeric(as.character(datos$A_2014))
media_diaria<-function(xi,c0,c1,c2,c3,pmax){
assert(c3>c2 & c2>c1 & c1>c0)
pi<-0
if (xi>=c0 & xi<=c1)
{
pi<-pmax*((xi-c0)/(c1-c0))
}
if (xi>=(c1+1) & xi<=c2)
{
pi<-pmax
}
if (xi>=(c2+1) & xi<=c3)
{
pi<-pmax*((c3-xi)/(c3-c2))
}
return(pi)
}
#file.remove(list.files(pattern=".png"))
rm(list=ls())
gc(TRUE)
a1<-Sys.time()
library("testit")
library(parallel)
library(sna)
library(magick)
#setwd("C:/Users/ASUS/Dropbox/laxtex/tablas")
setwd("C:/Users/Z230/Dropbox/Alex_tesis/tablas")
datos<-read.csv("producciones.csv",header = T,sep = ",")
datos
n_municipios<-dim(datos)[1]
dias_ciclo<-as.numeric(as.Date("2015-6-30")-as.Date("2014-06-30"))+1
inicio_ciclo<-as.Date("2014-06-30")
m_producciones<-matrix(nrow = n_municipios,ncol=dias_ciclo)
dias<-1:dias_ciclo
#datos$A_2014<-as.numeric(as.character(datos$A_2014))
media_diaria<-function(xi,c0,c1,c2,c3,pmax){
assert(c3>c2 & c2>c1 & c1>c0)
pi<-0
if (xi>=c0 & xi<=c1)
{
pi<-pmax*((xi-c0)/(c1-c0))
}
if (xi>=(c1+1) & xi<=c2)
{
pi<-pmax
}
if (xi>=(c2+1) & xi<=c3)
{
pi<-pmax*((c3-xi)/(c3-c2))
}
return(pi)
}
file.remove(list.files(pattern=".png"))
#rm(list=ls())
#gc(TRUE)
a1<-Sys.time()
library("testit")
library(parallel)
library(sna)
library(magick)
#setwd("C:/Users/ASUS/Dropbox/laxtex/tablas")
#setwd("C:/Users/Z230/Dropbox/Alex_tesis/tablas")
setwd("C:/Users/Alex/Dropbox/TESIS/laxtex/tablas")
datos<-read.csv("producciones1.csv",header = T,sep = ",")
datos
n_municipios<-dim(datos)[1]
dias_ciclo<-as.numeric(as.Date("2015-6-30")-as.Date("2014-06-30"))+1
inicio_ciclo<-as.Date("2014-06-30")
dias<-1:dias_ciclo
#datos$A_2014<-as.numeric(as.character(datos$A_2014))
media_diaria<-function(xi,c0,c1,c2,c3,pmax){
assert(c3>c2 & c2>c1 & c1>c0)
pi<-0
if (xi>=c0 & xi<=c1)
{
pi<-pmax*((xi-c0)/(c1-c0))
}
if (xi>=(c1+1) & xi<=c2)
{
pi<-pmax
}
if (xi>=(c2+1) & xi<=c3)
{
pi<-pmax*((c3-xi)/(c3-c2))
}
return(pi)
}
###################### prod_mun genera dos tipos de producción por centro de producción              #############
###################### una versión deterministica y la otra estocastica por medio de Monte-Carlo     #############
prod_mun<-function(n0,n1,n2,n3,media,varianza){
factor_esc<-(1/3)*(n2+n3-n1-1)
ymax<-media/factor_esc
dias<-1:dias_ciclo
producciones<-numeric()
producciones_al<-numeric()
for (i in 1:dias_ciclo)
{
if (i<=n3 & i>=n0)
{
producciones[i]<-media_diaria(xi=dias[i],c0=n0,c1=n1,c2=n2,c3=n3,
pmax=ymax)
}else
producciones[i]<-0
}
desv_producciones<-sqrt(varianza*producciones*(1/media))
for (i in 1:dias_ciclo)
{
producciones_al[i]<-abs(rnorm(1,producciones[i],desv_producciones[i]))
}
return(list(al=producciones_al,det=producciones))
}
producciones1
producciones
#file.remove(list.files(pattern=".png"))
#rm(list=ls())
#gc(TRUE)
a1<-Sys.time()
library("testit")
library(parallel)
library(sna)
library(magick)
#setwd("C:/Users/ASUS/Dropbox/laxtex/tablas")
#setwd("C:/Users/Z230/Dropbox/Alex_tesis/tablas")
setwd("C:/Users/Alex/Dropbox/TESIS/laxtex/tablas")
datos<-read.csv("producciones1.csv",header = T,sep = ",")
datos
n_municipios<-dim(datos)[1]
dias_ciclo<-as.numeric(as.Date("2015-6-30")-as.Date("2014-06-30"))+1
inicio_ciclo<-as.Date("2014-06-30")
dias<-1:dias_ciclo
#datos$A_2014<-as.numeric(as.character(datos$A_2014))
media_diaria<-function(xi,c0,c1,c2,c3,pmax){
assert(c3>c2 & c2>c1 & c1>c0)
pi<-0
if (xi>=c0 & xi<=c1)
{
pi<-pmax*((xi-c0)/(c1-c0))
}
if (xi>=(c1+1) & xi<=c2)
{
pi<-pmax
}
if (xi>=(c2+1) & xi<=c3)
{
pi<-pmax*((c3-xi)/(c3-c2))
}
return(pi)
}
###################### prod_mun genera dos tipos de producción por centro de producción              #############
###################### una versión deterministica y la otra estocastica por medio de Monte-Carlo     #############
prod_mun<-function(n0,n1,n2,n3,media,varianza){
factor_esc<-(1/3)*(n2+n3-n1-1)
ymax<-media/factor_esc
dias<-1:dias_ciclo
producciones<-numeric()
producciones_al<-numeric()
for (i in 1:dias_ciclo)
{
if (i<=n3 & i>=n0)
{
producciones[i]<-media_diaria(xi=dias[i],c0=n0,c1=n1,c2=n2,c3=n3,
pmax=ymax)
}else
producciones[i]<-0
}
desv_producciones<-sqrt(varianza*producciones*(1/media))
for (i in 1:dias_ciclo)
{
producciones_al[i]<-abs(rnorm(1,producciones[i],desv_producciones[i]))
}
return(list(al=producciones_al,det=producciones))
}
############################################################################################################################
### la función lo que recibe es la dirección en donde está ubicada la tabla distancia entre "" ##
### regresa que centro productivo va con que centro de acopio
vecinos<-function(url, ano){
#url<-"C:/Users/Alex/Dropbox/TESIS/laxtex/tablas/distancias.csv"
ww1<-url
acopio<-read.csv(ww1, header = TRUE)
############################ Selecciona los centros productivos a 120 Kms al centro de acopio #######
acop<-dim(read.csv("C:/Users/Alex/Dropbox/TESIS/laxtex/tablas/distancias.csv"))[2]
if( ano>1){
maxw<-apply(acopio[2:8],2,max)
minw<-apply(acopio[2:8],2, min)
for (b in 1:length(maxw)){
acopio[n_municipios+(ano-1),1+b]<-runif(1, min=minw[b], max=maxw[b] )
} }
aco<-list()
orden<-list()
for ( i in 2: acop) {
aco[[i-1]]<-sort(acopio[,i], index.return=TRUE)
aux1<-sum(aco[[i-1]]$x<120)
orden[[i-1]]<-aco[[i-1]]$ix[1:aux1]
}
##### ############# Determinar que centro de productivo está asignado en cuales centros de acopio ####
p<-data.frame()
for ( i in 1: dim(acopio)[1]){
for ( j in 1: (acop-1) ){
if ( i %in% orden[[j]][])
{ p<-rbind(p,c(i,j))
}else{}
}
}
pta<-table(p)
################### De los centros de acopios que tienen el mismo centro productivo selecciono solo un centro de acopio
asig<-vector()
sump<-apply(pta,1,sum)
for ( j in 1:dim(pta)[1])
{
if( sump[j]>1){
fg<-which(pta[j,1:7]==1)
asig[j]<-sample(fg,1)
}else{
asig[j]<-which(pta[j,1:7]==1)
}
}
############ De los centros productivos que no están a 120 kms lo asigno al centro de acopio más cercano
p1<-as.numeric(row.names(pta))
pf1<-data.frame(p1,asig)
centr<-1:dim(acopio)[1]
otros<-centr %in% p1
otros1<-centr[otros==FALSE]
otros2<-data.frame()
for ( j in otros1){
otros2<-rbind(otros2, c(j,which.min(acopio[j,2:8])))
}
##### Asignación final de los centros productivos a los centros de acopio #####
names(otros2)<-c("productores", "acopio")
names(pf1)<-c("productores", "acopio")
pf2<-rbind(pf1,otros2)
###### Se libera espacio de memoria, aunque no es mucho, son elementos que no se ocuparan    ##########
#####  por lo que son destruidos o borrados de la memoria del sistema                        ##########
rm(otros,otros2, p1,pta,sump,fg,centr,aux1,asig,aco,acopio,p,pf1,orden)
return(pf2)
}
######################################################################################################################
######################################################################################################################
############################# Acumulación de producción en los centros de acopio######################################
######################################################################################################################
######################################################################################################################
######################################################################################################################
############## se ha definido el tamano de contenedor que puede ser modificaco asi como el                          ##
############## factor de penetración de mercado (cuanto es capaz de conseguir de la producción total de su zona)    ##
############## el ciclo "ca" hace los procesos para cada centro de acopio, en vecw coloco los centro productivos    ##
############## correspondientes al centro de acopio asignado en la función vector (produc_acopio) y sobre estos     ##
############## elementos se hace el conteo de la cantidad de toneldas acumuladas, al completar un contenedor (20 t) ##
############## se realiza un envio, claro es posible tener dos o tres envios el mismo periodo de tiempo             ##
######################################################################################################################
####################################### Esta sección permite reactualizar la matriz de producción para cada C.Acopio #############
##################################################################################################################################
m_producciones<-list()
for (j in 1:n_municipios){
n0<-as.numeric(as.Date(datos$Dia_inicial[j])-inicio_ciclo+1)
n1<-as.numeric(as.Date(datos$Pico_1[j])-inicio_ciclo+1)
n2<-as.numeric(as.Date(datos$Pico_2[j])-inicio_ciclo+1)
n3<-as.numeric(as.Date(datos$Dia_final[j])-inicio_ciclo+1)
#media<-mean(c(datos$A_2014[j],datos$A_2015[j],datos$A_2016[j]))
##################### Vamos a suponer que la proyección al año cuatro se puede ajustar con una regresión lineal en vez de un  ####
##################### promedio para tener un pronostico un poco mejor, claro con 3 datos hay mucha variación en este asepcto #####
med<-c(datos$A_2014[j],datos$A_2015[j],datos$A_2016[j])
w<-1:length(med)
mod1<-lm(med~w)
newdata=w=4
media<-predict(mod1,newdata)
prueba<-summary(mod1)$r.squared
if(prueba<0.6){
media<-mean(c(datos$A_2014[j],datos$A_2015[j],datos$A_2016[j]))
}
varianza<-sd(c(datos$A_2014[j],datos$A_2015[j],datos$A_2016[j]))
m_producciones[[j]]<-prod_mun(n0=n0,n1=n1,n2=n2,n3=n3,media=media,
varianza=varianza)$det
}
m_producciones
##################################################################################################################################
#setwd("C:/Users/Z230//Dropbox/Alex_tesis/Graficas")
#for ( rep in 1) {
tamano_contedenor=20
penetracion_local=0.38
acop<-dim(read.csv("C:/Users/Alex/Dropbox/TESIS/laxtex/tablas/distancias.csv"))[2]-1
produc_acopio<-vecinos("C:/Users/Alex/Dropbox/TESIS/laxtex/tablas/distancias.csv", 1)
produc_acopio
salidas<-matrix(0,ncol=length(dias), nrow=acop)
sobran<-c()
for ( ca in 1:acop) {                ### Centros de acopio
vecw<-which(produc_acopio$acopio==ca)
envio<-0
sobran[ca]<-0
for ( t in dias){                  ### Dias del año
envio<-0                                 ## En el periodo final falta saber cuanto quedo de sobrante del producto
for ( k in vecw){                ### centros productores
envio<- (m_producciones[[k]][t])*penetracion_local+envio
}
envio<-envio+sobran[ca]
conte<-envio%/%tamano_contedenor
if ( conte>0 ){
salidas[ca,t]<-conte
}else{
salidas[ca,t]<-0
}
sobran[ca]<-envio-(conte*tamano_contedenor)
}
}
######################################################################################################
####################### Esta Sección se hace las graficas como si fuera un              ##############
####################### diagrama de GANTS en el eje Y se tiene los centros de acopio    ##############
####################### sobre el eje X los dias de año simulados                        ##############
######################################################################################################
# ws<-paste("grafi_", rep, ".png", sep="")
# png(ws,width=800, height=800 )
# sociomatrixplot(salidas, main=rep, xlab="Dias del año", cex.lab = 1.5,drawlines = FALSE,
#             labels=list(c("1", "2", "3","4", "5", "6", "7"), c("")), ylab="Centros de acopio")
#
# graphics.off()
#
# }
#
#
#
#
# frames=lapply(1:100,function(x) image_read(paste("grafi_",x,".png",sep="")))
# animation <- image_animate(image_join(frames),fps=5 )
# print(animation)
# w3<-paste("Acumu_acopio", ".gif"  )
# image_write(animation, w3)
##################################################################################################################################
##################################################################################################################################
################################## Envio internacional  ##########################################################################
internacional<-read.csv("C:/Users/Alex/Dropbox/TESIS/laxtex/tablas/internacional_precios.csv",header = TRUE,sep = ",")
costtranspor<-read.csv("C:/Users/Alex/Dropbox/TESIS/laxtex/tablas/precio_transporte.csv",header = TRUE,sep = ",")
precios<-apply(internacional[,2:4], 1,mean)                   #### Precio de una tonelada pagada por el pais i
paises<-seq(length(precios))
datprecio<-data.frame(paises,precios)
puertos<-1:4
tamano_contedenor<-20
utilidad<-data.frame()
for ( ca in 1:acop){
aux<-subset(costtranspor[,1:3], costtranspor[,1]==ca)
for ( puert in puertos){
aux1<-subset(aux, aux$Puerto==puert)
prepuer<-aux1[2]
for ( pai in paises) {
aux2<-subset(costtranspor[1:20,5:7], costtranspor[,5]==puert)
aux2<-subset(aux2, aux2[,3]==pai)
prepais<-aux2[2]
venta<-subset(datprecio, paises==pai,select=precios)
total<-as.numeric(venta)*tamano_contedenor-(as.numeric(prepuer)+as.numeric(prepais))
utilidad<-rbind(utilidad, c(ca,puert,pai, total)   )
}
}
}
names(utilidad)<-c("Acopio", "Puerto", "Cliente", "Renta")
opcion<-data.frame()
for ( ca in 1:acop){
for ( pai in paises){
aux<-subset(utilidad, Acopio==ca & Cliente==pai)
max<- max(aux$Renta)
opcion<-rbind(opcion, c(subset(aux, Renta==max)))
}
}
prob<-vector()
for ( ca in 1:acop){
aux<-subset(opcion,   opcion[,1]==ca)
prob<-rbind(prob,cbind(aux[,4]/sum(aux[,4])))
}
opcion$pro<-prob
opcion
##################################################################################################################################
##### Selección de un cliente aleatoriamente dado la probabilidad que se calculo bajo su rentabilidad esperada ###################
##################################################################################################################################
envi<-function(matrix, acopio){
opcion<-matrix
#envif<-data.frame()
for ( ca in acopio){
aux<-subset(opcion, opcion[,1]==ca)
aux2<-sample(aux$Cliente, size=1, prob=aux$pro)
#envif<-rbind(envif,subset(aux, aux$Cliente==aux2))
}
return(subset(aux, aux$Cliente==aux2))
}
##################################################################################################################################
############################## Está sección hace refencia a cuanta mercancia recibe el pais comprador, se le permite al centro ###
############################## de acopio hacer un cambio de pais cada 8 envios con una probabilidad determinada           ########
############################## no importa el tiempo entre cada envio sino más bien los contenedores enviados a cada pais. ########
############################## change hace referencia a la probabilidad de cambiar de cliente internacional               ########
############################## mientras que limi_envi es la cantidad de envios minimos requeridos para permitir el cambio ########
############################## si los envios son igual a limi_envi entonces actualizo el contador a CERO                  ########
##################################################################################################################################
change<-0.35
env_cliente<-data.frame()
limi_envi<-8
aux<-0
for ( aco in 1:(acop-1  )){
clien<-as.numeric(envi(opcion,aco)[3])
for ( dia in dias){
aux<- salidas[aco,dia]+aux
auxw<-sum(aux)/limi_envi
if( auxw==1 & runif(1)<change ){
clien<-as.numeric(envi(opcion, aco)[3])
aux<-0
}
env_cliente<-rbind(env_cliente, c(aco,clien, dia, salidas[aco,dia]) )
aux<-0
}
}
names(env_cliente)<-c("Acopio","Cliente", "Dia", "Envio")
a2<-Sys.time()
a2-a1
##################################################################################################################################
################################# Comprobación si lo que se produce es lo mismo que se envio + los que no se pudo enviar sobrante#
##################################################################################################################################
ae<-lapply(m_producciones, sum)
sum(unlist(ae)*penetracion_local)
#==sum(env_cliente$Envio)*20+sum(sobran)
############# Con esto se comprueba balance de la materia, todo lo que entro en el sistema es igual a lo que salio de ÉL #######
