if (dim(aR)[1] > 0) {
points(aR$x, aR$y, pch=17, col="goldenrod", bg="goldenrod")
}
graphics.off()
}
png("p6e.png", width=600, height=300)
plot(1:length(epidemia), 100 * epidemia / n, xlab="Tiempo", ylab="Porcentahe de infectados")
graphics.off()
stopCluster(cluster)
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_6/Graficas")
rm(list=ls())
library(parallel)
l <- 1.5
n <- 50
pi <- 0.05
pr <- 0.02
v <- l / 30
S = 2
I = 3
R = 4
initial = c(S, I)
p = 0.2
iprobs = c(1-p, p)
agentes = data.frame(x = runif(n, 0, l), y = runif(n, 0, l), dx = runif(n, -v, v),
dy = runif(n, -v, v), estado = sample(initial, n, replace=TRUE, iprobs))
epidemia <- integer()
r <- 0.1
tmax <- 100
digitos <- floor(log(tmax, 10)) + 1
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "l")
for (tiempo in 1:tmax) {
infectados <- dim(agentes[agentes$estado == 3,])[1]
epidemia <- c(epidemia, infectados)
if (infectados == 0) {
break
}
contagios <- rep(FALSE, n)
for (i in 1:n) { # posibles contagios
a1 <- agentes[i, ]
if (a1$estado == 3) { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == 2) { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
contagios[j] <- TRUE
}
}
}
}
}
}
}
#clusterExport(cluster, "contagios")
for (i in 1:n) { # movimientos y actualizaciones
a <- agentes[i, ]
if (contagios[i]) {
a$estado <- 3
} else if (a$estado == 3) { # ya estaba infectado
if (runif(1) < pr) {
a$estado <- 4 # recupera
}
}
clusterExport(cluster, "a")
ac<-parSapply(cluster, 1, function(x){
a$x <- a$x + a$dx
a$y <- a$y + a$dy
a$x[a$x>l]=  a$x - l
a$y[a$y>l]=  a$y - l
a$x[a$x<0]=  a$x + l
a$y[a$y<0]=  a$y + l
return(a)
})
agentes[i, ] <- c(ac)
}
aS <- agentes[agentes$estado == 2,]
aI <- agentes[agentes$estado == 3,]
aR <- agentes[agentes$estado == 4,]
tl <- paste(tiempo, "", sep="")
while (nchar(tl) < digitos) {
tl <- paste("0", tl, sep="")
}
salida <- paste("p6_t", tl, ".png", sep="")
tiempo <- paste("Paso", tiempo)
png(salida)
plot(l, type="n", main=tiempo, xlim=c(0, l), ylim=c(0, l), xlab="x", ylab="y")
if (dim(aS)[1] > 0) {
points(aS$x, aS$y, pch=15, col="chartreuse3", bg="chartreuse3")
}
if (dim(aI)[1] > 0) {
points(aI$x, aI$y, pch=16, col="firebrick2", bg="firebrick2")
}
if (dim(aR)[1] > 0) {
points(aR$x, aR$y, pch=17, col="goldenrod", bg="goldenrod")
}
graphics.off()
}
png("p6e.png", width=600, height=300)
plot(1:length(epidemia), 100 * epidemia / n, xlab="Tiempo", ylab="Porcentahe de infectados")
graphics.off()
stopCluster(cluster)
a
for (i in 1:n) { # movimientos y actualizaciones
a <- agentes[i, ]
if (contagios[i]) {
a$estado <- 3
} else if (a$estado == 3) { # ya estaba infectado
if (runif(1) < pr) {
a$estado <- 4 # recupera
}
}
}
ac<-parSapply(cluster, 1:n, function(x){
a$x <- a$x + a$dx
a$y <- a$y + a$dy
a$x[a$x>l]=  a$x - l
a$y[a$y>l]=  a$y - l
a$x[a$x<0]=  a$x + l
a$y[a$y<0]=  a$y + l
return(a)
})
clusterExport(cluster, "a")
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "contagios")
clusterExport(cluster, "agentes")
clusterExport(cluster, "p")
clusterExport(cluster, "r")
clusterExport(cluster, "n")
clusterExport(cluster, "a")
ac<-parSapply(cluster, 1:n, function(x){
a$x <- a$x + a$dx
a$y <- a$y + a$dy
a$x[a$x>l]=  a$x - l
a$y[a$y>l]=  a$y - l
a$x[a$x<0]=  a$x + l
a$y[a$y<0]=  a$y + l
return(a)
})
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "contagios")
clusterExport(cluster, "agentes")
clusterExport(cluster, "l")
clusterExport(cluster, "r")
clusterExport(cluster, "n")
for (i in 1:n) { # movimientos y actualizaciones
a <- agentes[i, ]
if (contagios[i]) {
a$estado <- 3
} else if (a$estado == 3) { # ya estaba infectado
if (runif(1) < pr) {
a$estado <- 4 # recupera
}
}
}
clusterExport(cluster, "a")
ac<-parSapply(cluster, 1:n, function(x){
a$x <- a$x + a$dx
a$y <- a$y + a$dy
a$x[a$x>l]=  a$x - l
a$y[a$y>l]=  a$y - l
a$x[a$x<0]=  a$x + l
a$y[a$y<0]=  a$y + l
return(a)
})
agentes[i, ] <- c(ac)
a
ac
t(ac)
agentes <-data.frame( t(ac))
agentes
agentes$estado
agentes <-data.frame( unlist(t(ac)))
agentes$estado
agentes
matrix(aux, ncol=5, nrow=n)
aux <-unlist(t(ac))
matrix(aux, ncol=5, nrow=n)
data.frame(matrix(aux, ncol=5, nrow=n))
data.frame(matrix(aux, ncol=5, nrow=n), names=c("x", "y", "dx", "dy","estado" )  )
data.frame(matrix(aux, ncol=5, nrow=n), colnames=c("x", "y", "dx", "dy","estado" )  )
aux <-unlist(t(ac))
agentes<-data.frame(matrix(aux, ncol=5, nrow=n) )
colnames(agentes)=c("x", "y", "dx", "dy","estado" )
agentes
agentes$estado
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_6/Graficas")
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_6/Graficas")
rm(list=ls())
library(parallel)
l <- 1.5
n <- 50
pi <- 0.05
pr <- 0.02
v <- l / 30
S = 2
I = 3
R = 4
initial = c(S, I)
p = 0.2
iprobs = c(1-p, p)
agentes = data.frame(x = runif(n, 0, l), y = runif(n, 0, l), dx = runif(n, -v, v),
dy = runif(n, -v, v), estado = sample(initial, n, replace=TRUE, iprobs))
epidemia <- integer()
r <- 0.1
tmax <- 100
digitos <- floor(log(tmax, 10)) + 1
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "l")
#cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "contagios")
clusterExport(cluster, "agentes")
#clusterExport(cluster, "l")
clusterExport(cluster, "r")
clusterExport(cluster, "n")
for (tiempo in 1:tmax) {
infectados <- dim(agentes[agentes$estado == 3,])[1]
epidemia <- c(epidemia, infectados)
if (infectados == 0) {
break
}
contagios <- rep(FALSE, n)
for (i in 1:n) { # posibles contagios
a1 <- agentes[i, ]
if (a1$estado == 3) { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == 2) { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
contagios[j] <- TRUE
}
}
}
}
}
}
}
#clusterExport(cluster, "contagios")
#for (i in 1:n) {
#
clusterExport(cluster, "a")
ac<-parSapply(cluster, 1:n, function(x){         # movimientos y actualizaciones
a <- agentes[i, ]
if (contagios[i]) {
a$estado <- 3
} else if (a$estado == 3) { # ya estaba infectado
if (runif(1) < pr) {
a$estado <- 4 # recupera
}
}
a$x <- a$x + a$dx
a$y <- a$y + a$dy
a$x[a$x>l]=  a$x - l
a$y[a$y>l]=  a$y - l
a$x[a$x<0]=  a$x + l
a$y[a$y<0]=  a$y + l
return(a)
})
aux <-unlist(t(ac))
agentes<-data.frame(matrix(aux, ncol=5, nrow=n) )
colnames(agentes)=c("x", "y", "dx", "dy","estado" )
aS <- agentes[agentes$estado == 2,]
aI <- agentes[agentes$estado == 3,]
aR <- agentes[agentes$estado == 4,]
tl <- paste(tiempo, "", sep="")
while (nchar(tl) < digitos) {
tl <- paste("0", tl, sep="")
}
salida <- paste("p6_t", tl, ".png", sep="")
tiempo <- paste("Paso", tiempo)
png(salida)
plot(l, type="n", main=tiempo, xlim=c(0, l), ylim=c(0, l), xlab="x", ylab="y")
if (dim(aS)[1] > 0) {
points(aS$x, aS$y, pch=15, col="chartreuse3", bg="chartreuse3")
}
if (dim(aI)[1] > 0) {
points(aI$x, aI$y, pch=16, col="firebrick2", bg="firebrick2")
}
if (dim(aR)[1] > 0) {
points(aR$x, aR$y, pch=17, col="goldenrod", bg="goldenrod")
}
graphics.off()
}
png("p6e.png", width=600, height=300)
plot(1:length(epidemia), 100 * epidemia / n, xlab="Tiempo", ylab="Porcentahe de infectados")
graphics.off()
stopCluster(cluster)
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_6/Graficas")
rm(list=ls())
library(parallel)
l <- 1.5
n <- 50
pi <- 0.05
pr <- 0.02
v <- l / 30
S = 2
I = 3
R = 4
initial = c(S, I)
p = 0.2
iprobs = c(1-p, p)
agentes = data.frame(x = runif(n, 0, l), y = runif(n, 0, l), dx = runif(n, -v, v),
dy = runif(n, -v, v), estado = sample(initial, n, replace=TRUE, iprobs))
epidemia <- integer()
r <- 0.1
tmax <- 100
digitos <- floor(log(tmax, 10)) + 1
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "l")
#cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "contagios")
clusterExport(cluster, "agentes")
#clusterExport(cluster, "l")
clusterExport(cluster, "r")
clusterExport(cluster, "n")
for (tiempo in 1:tmax) {
infectados <- dim(agentes[agentes$estado == 3,])[1]
epidemia <- c(epidemia, infectados)
if (infectados == 0) {
break
}
contagios <- rep(FALSE, n)
for (i in 1:n) { # posibles contagios
a1 <- agentes[i, ]
if (a1$estado == 3) { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == 2) { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
contagios[j] <- TRUE
}
}
}
}
}
}
}
#clusterExport(cluster, "contagios")
#for (i in 1:n) {
#
# clusterExport(cluster, "a")
ac<-parSapply(cluster, 1:n, function(x){         # movimientos y actualizaciones
a <- agentes[i, ]
if (contagios[i]) {
a$estado <- 3
} else if (a$estado == 3) { # ya estaba infectado
if (runif(1) < pr) {
a$estado <- 4 # recupera
}
}
a$x <- a$x + a$dx
a$y <- a$y + a$dy
a$x[a$x>l]=  a$x - l
a$y[a$y>l]=  a$y - l
a$x[a$x<0]=  a$x + l
a$y[a$y<0]=  a$y + l
return(a)
})
aux <-unlist(t(ac))
agentes<-data.frame(matrix(aux, ncol=5, nrow=n) )
colnames(agentes)=c("x", "y", "dx", "dy","estado" )
aS <- agentes[agentes$estado == 2,]
aI <- agentes[agentes$estado == 3,]
aR <- agentes[agentes$estado == 4,]
tl <- paste(tiempo, "", sep="")
while (nchar(tl) < digitos) {
tl <- paste("0", tl, sep="")
}
salida <- paste("p6_t", tl, ".png", sep="")
tiempo <- paste("Paso", tiempo)
png(salida)
plot(l, type="n", main=tiempo, xlim=c(0, l), ylim=c(0, l), xlab="x", ylab="y")
if (dim(aS)[1] > 0) {
points(aS$x, aS$y, pch=15, col="chartreuse3", bg="chartreuse3")
}
if (dim(aI)[1] > 0) {
points(aI$x, aI$y, pch=16, col="firebrick2", bg="firebrick2")
}
if (dim(aR)[1] > 0) {
points(aR$x, aR$y, pch=17, col="goldenrod", bg="goldenrod")
}
graphics.off()
}
png("p6e.png", width=600, height=300)
plot(1:length(epidemia), 100 * epidemia / n, xlab="Tiempo", ylab="Porcentahe de infectados")
graphics.off()
stopCluster(cluster)
##############################################################################
###                Practica 6. Sistema multiagente                          ##
###                         Normal                                          ##
###                     12/09/2017                                          ##
###                                                                         ##
##############################################################################
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_6/Graficas")
rm(list=ls())
library(parallel)
l <- 1.5
n <- 50
pi <- 0.05
pr <- 0.02
v <- l / 30
S = 2
I = 3
R = 4
initial = c(S, I)
p = 0.2
iprobs = c(1-p, p)
agentes = data.frame(x = runif(n, 0, l), y = runif(n, 0, l), dx = runif(n, -v, v),
dy = runif(n, -v, v), estado = sample(initial, n, replace=TRUE, iprobs))
epidemia <- integer()
r <- 0.1
tmax <- 100
digitos <- floor(log(tmax, 10)) + 1
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "l")
for (tiempo in 1:tmax) {
infectados <- dim(agentes[agentes$estado == 3,])[1]
epidemia <- c(epidemia, infectados)
if (infectados == 0) {
break
}
contagios <- rep(FALSE, n)
for (i in 1:n) { # posibles contagios
a1 <- agentes[i, ]
if (a1$estado == 3) { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == 2) { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
contagios[j] <- TRUE
}
}
}
}
}
}
}
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "contagios")
clusterExport(cluster, "agentes")
clusterExport(cluster, "l")
clusterExport(cluster, "r")
clusterExport(cluster, "n")
#clusterExport(cluster, "contagios")
for (i in 1:n) { # movimientos y actualizaciones
a <- agentes[i, ]
if (contagios[i]) {
a$estado <- 3
} else if (a$estado == 3) { # ya estaba infectado
if (runif(1) < pr) {
a$estado <- 4 # recupera
}
}
}
clusterExport(cluster, "a")
ac<-parSapply(cluster, 1:n, function(x){
a$x <- a$x + a$dx
a$y <- a$y + a$dy
a$x[a$x>l]=  a$x - l
a$y[a$y>l]=  a$y - l
a$x[a$x<0]=  a$x + l
a$y[a$y<0]=  a$y + l
return(a)
})
aux <-unlist(t(ac))
agentes<-data.frame(matrix(aux, ncol=5, nrow=n) )
colnames(agentes)=c("x", "y", "dx", "dy","estado" )
aS <- agentes[agentes$estado == 2,]
aI <- agentes[agentes$estado == 3,]
aR <- agentes[agentes$estado == 4,]
tl <- paste(tiempo, "", sep="")
while (nchar(tl) < digitos) {
tl <- paste("0", tl, sep="")
}
salida <- paste("p6_t", tl, ".png", sep="")
tiempo <- paste("Paso", tiempo)
png(salida)
plot(l, type="n", main=tiempo, xlim=c(0, l), ylim=c(0, l), xlab="x", ylab="y")
if (dim(aS)[1] > 0) {
points(aS$x, aS$y, pch=15, col="chartreuse3", bg="chartreuse3")
}
if (dim(aI)[1] > 0) {
points(aI$x, aI$y, pch=16, col="firebrick2", bg="firebrick2")
}
if (dim(aR)[1] > 0) {
points(aR$x, aR$y, pch=17, col="goldenrod", bg="goldenrod")
}
graphics.off()
}
