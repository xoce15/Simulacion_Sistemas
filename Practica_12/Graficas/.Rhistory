spheres3d(1,3,4, radius=10, alpha=0.5, col=3)
spheres3d(2,3,4, radius=4, alpha=0.5, col=4)
spheres3d(1,3,4, radius=10, alpha=0.5, col=3)
spheres3d(2,3,4, radius=4, alpha=0.5, col=4)
spheres3d(3,4,4, radius=3, alpha=0.5, col=5)
axes3d()
spheres3d(2,2,2, radius=3,  col="red")
play3d( spin3d( axis = c(0, 0, 1), rpm = 7), duration = 10 )
library(plot3D)
library(rgl)
library(plot3Drgl)
library(rgl)
library (stats)
library (mco)
library(rgl)
library(plot3Drgl)
library(scatterplot3d)
library(akima)
library(stats)
library(corrplot)
library(fields)
library(akima)
library(rsm)
library(MASS)
library(lattice)
library(grDevices)
library(graphics)
library(gdata)
library(magrittr)
library(animation)
open3d()                                   # create new plot
spheres3d(x = 1, y = 1, z = 5, radius = 1, color="red") # produce sphere
spheres3d(seq(from=1, to=10,length.out=10), seq(from=1, to=10,length.out=10), seq(from=1, to=10,length.out=10), radius = runif(10), color = rainbow(10))
spheres3d(x = 0.7071, y = 0.0001, z = 0.7071, radius = 0.10001,filled=F, col="azure2",alpha=0.5 )
spheres3d(x = 0.00001, y =0.6250, z = 0.6250, radius = 0.8839,filled=F, col="red",alpha=0.5 )
plot(runif(10), ylim = 0:1)
for (i in 1:10) plot(runif(10), ylim = 0:1)
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
##############################################################################
###                          Practica 7. Busqueda Local                     ##
###                                                                         ##
###                     23/09/2017                                          ##
###                                                                         ##
##############################################################################
#La tarea se trata de maximizar la función
#bidimensional del ejemplo, g(x,y)g(x,y),
#con la misma técnica del ejemplo unidimensional.
#La posición actual es un par x,yx,y y se ocupan
#dos movimientos aleatorios, ΔxΔx y ΔyΔy, cuyas
#combinaciones proveen cuatro posiciones vecino,
#de los cuales aquella que logra el mayor valor
#para gg es seleccionado.
###### TAREA #############################
##############
g <- function(x, y) {
return(((x + 0.5)^4 - 30 * x^2 - 20 * x + (y + 0.5)^4 - 30 * y^2 - 20 * y)/100)
}
x <- seq(-6, 5, 0.25)
y<-x
low <- -6
high <- 5
tmax <- 100
step <- 0.3
replica <- function(t) {
x <- runif(1, low, high)
y <- runif(1, low, high)
bestpos <- c(x, y)
bestval <- g(x, y)
trayectoria = c(bestval)
for (tiempo in 1:t) {
d <- runif(1, 0, step)
op = c(x - d, y, x + d, y, x, y - d, x, y + d)
posibles = numeric()
for (i in 1:4) {
posibles <- c(posibles, g(op[2*i - 1], op[2*i]))
}
mejor <- which.max(posibles)
nuevo = posibles[mejor]
x<-op[2*mejor - 1]
y<-op[2*mejor]
if((x<= high & y <= high) & ( x>= low & y>= low)){
if (nuevo > bestval) { # minimizamos
bestpos <- c(op[(2*mejor - 1) ],op[2*mejor])
bestval <- nuevo
}
trayectoria <- c(trayectoria, bestval)
}else {
x <- runif(1, low, high)
y <- runif(1, low, high)
}
}
return(bestpos)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
x <- seq(low, high, length.out=500)
#y <- foreach(i = x, .combine=c) %dopar% g(i,i)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
#clusterExport(cluster, "tmax")
resultados <-parSapply(cluster, rep(tmax,replicas ), replica)
stopCluster(cluster)
resultados
# for (pot in 2:4) {
#  replicas<-100
#  tmax <- 10^pot
#  resultados <- foreach(i = 1:replicas, .combine=rbind) %dopar% replica(tmax)
#png(paste("p7_", tmax, ".png", sep=""), width=700, height=300)
#plot(x, y, type="l", main=paste(tmax, "pasos"))
#  valores <- g(resultados[1],resultados[2])
#points(resultados, valores, pch=16, col="red")
#  mejor <- which.max(valores)
#abline(v = resultados[mejor], col="green", lwd=3)
#graphics.off()
#}
#stopImplicitCluster()
resultados
resultados <-parSapply(cluster, rep(tmax,replicas ), replica)
replicas<-100
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
resultados <-parSapply(cluster, rep(tmax,replicas ), replica)
stopCluster(cluster)
resultados
temp <- seq(-pi, 0, length = 50)
x <- c(rep(1, 50) %*% t(cos(temp)))
y <- c(cos(temp) %*% t(sin(temp)))
z <- c(sin(temp) %*% t(sin(temp)))
scatterplot3d(x, y, z, highlight.3d=TRUE,
col.axis="blue", col.grid="lightblue",
main="scatterplot3d - 2", pch=20)
###################### GRAFICA ##########################################################
data(trees)
s3d <- scatterplot3d(trees, type="h", highlight.3d=TRUE,
angle=55, scale.y=0.7, pch=16, main="scatterplot3d - 5")
# Now adding some points to the "scatterplot3d"
s3d$points3d(seq(10,20,2), seq(85,60,-5), seq(60,10,-10),
col="blue", type="h", pch=16)
# Now adding a regression plane to the "scatterplot3d"
attach(trees)
my.lm <- lm(Volume ~ Girth + Height)
s3d$plane3d(my.lm, lty.box = "solid")
x
y
z
plot3d(x,y,z)
g <- function(x, y) {
return(((x + 0.5)^4 - 30 * x^2 - 20 * x + (y + 0.5)^4 - 30 * y^2 - 20 * y)/100)
}
x <- seq(-6, 5, 0.25)
y<-x
low <- -6
high <- 5
tmax <- 100
step <- 0.3
replica <- function(t) {
x <- runif(1, low, high)
y <- runif(1, low, high)
bestpos <- c(x, y)
bestval <- g(x, y)
trayectoria = c(bestval)
for (tiempo in 1:t) {
d <- runif(1, 0, step)
op = c(x - d, y, x + d, y, x, y - d, x, y + d)
posibles = numeric()
for (i in 1:4) {
posibles <- c(posibles, g(op[2*i - 1], op[2*i]))
}
mejor <- which.max(posibles)
nuevo = posibles[mejor]
x<-op[2*mejor - 1]
y<-op[2*mejor]
if((x<= high & y <= high) & ( x>= low & y>= low)){
if (nuevo > bestval) { # minimizamos
bestpos <- c(op[(2*mejor - 1) ],op[2*mejor])
bestval <- nuevo
}
trayectoria <- c(trayectoria, bestval)
}else {
x <- runif(1, low, high)
y <- runif(1, low, high)
}
}
return(bestpos)
}
#suppressMessages(library(doParallel))
#registerDoParallel(makeCluster(detectCores() - 1))
#x <- seq(low, high, length.out=500)
#y <- foreach(i = x, .combine=c) %dopar% g(i,i)
replicas<-100
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "replica")
clusterExport(cluster, "g")
clusterExport(cluster, "high")
clusterExport(cluster, "low")
clusterExport(cluster, "step")
#clusterExport(cluster, "tmax")
resultados <-parSapply(cluster, rep(tmax,replicas ), replica)
stopCluster(cluster)
z <- outer(x, y, g)
x
y
z <- outer(x, y, g)
plot3d(x,y,z)
plot3d(x,y,z)
x
y
z <- outer(x, y, g)
z
plot3d(x,y,z)
persp(x, y, z, shade=0.2, col='orange', theta=40, phi=30)
persp3d(x,y,z)
persp3d(x,y,z, col="orange")
persp3d(x,y,z, col=rainbow(15))
persp3d(x,y,z, col='orange')
1++
##############################################################################
###                          Practica 12. REd Neuronal                      ##
###                                                                         ##
###                     28/10/2017                                          ##
###                                                                         ##
##############################################################################
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_12/Graficas")
#file.remove(list.files(pattern=".png"))
#rm(list=ls())
#gc(TRUE)
library(parallel)
library(magick)
binario <- function(d, l) {
b <- rep(FALSE, l)
while (l > 0 | d > 0) {
b[l] <- (d %% 2 == 1)
l <- l - 1
d <- bitwShiftR(d, 1)
}
return(b)
}
decimal <- function(bits, l) {
valor <- 0
for (pos in 1:l) {
valor <- valor + 2^(l - pos) * bits[pos]
}
return(valor)
}
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_12/Graficas")
ww="C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_12/Graficas/digitos.modelo.csv"
modelos<-read.csv (ww, header=FALSE, stringsAsFactors=F)
modelos[modelos=='n'] <- 90.95
modelos[modelos=='g'] <- 0.92
modelos[modelos=='b'] <- 0.002
r <-5
c <- 3
dim <- r * c
tasa <- 0.15
tranqui <- 0.99
tope <- 18
digitos <- 0:tope
k <- length(digitos)
contadores <- matrix(rep(0, k*(k+1)), nrow=k, ncol=(k+1))
rownames(contadores) <- 0:tope
colnames(contadores) <- c(0:tope, NA)
n <- floor(log(k-1, 2)) + 1
neuronas <- matrix(runif(n * dim), nrow=n, ncol=dim) # perceptrones
dat<-list()
prueba<-c(300)
#prueba<-c(3,5)
cluster <- makeCluster(detectCores() - 1)
dat14<-data.frame()
for ( h in 1:5){
tinicial<-0
tinicial<-Sys.time()
for (t in 1:5000) { # entrenamiento
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,]
correcto <- binario(d, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
if (deseada != resultado) {
ajuste <- tasa * (deseada - resultado)
tasa <- tranqui * tasa
neuronas[i,] <- w + ajuste * pixeles
}
}
}
clusterExport(cluster, c("neuronas", "n", "decimal", "k", "dim", "contadores", "modelos", "resultado","binario",  "deseada","tope"))
#for ( kt in prueba) {
# clusterExport(cluster,"kt")
ti<- parSapply(cluster, 1:300, function(t1) {
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,] # fila 1 contiene el cero, etc.
correcto <- decimal(binario(d, n),n)
salida <- rep(FALSE, n)
#clusterExport(cluster, c("pixeles","correcto","salida", "d","n","neuronas", "contadores"))
for ( i in 1:n){
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
salida[i] <- resultado
}
r <- min(decimal(salida, n), k) # todos los no-existentes van al final
# contadores[d+1, r+1] <- contadores[d+1, r+1] + 1
return(r==correcto)
})
ag<-as.numeric(ti)
aciertos<-sum(ag)/300
tfinal<-Sys.time()
dat14<-rbind(dat14,c(h,1, aciertos))
}
stopCluster(cluster)
dat14
##############################################################################
###                          Practica 12. REd Neuronal                      ##
###                                                                         ##
###                     28/10/2017                                          ##
###                                                                         ##
##############################################################################
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_12/Graficas")
#file.remove(list.files(pattern=".png"))
#rm(list=ls())
#gc(TRUE)
library(parallel)
library(magick)
binario <- function(d, l) {
b <- rep(FALSE, l)
while (l > 0 | d > 0) {
b[l] <- (d %% 2 == 1)
l <- l - 1
d <- bitwShiftR(d, 1)
}
return(b)
}
decimal <- function(bits, l) {
valor <- 0
for (pos in 1:l) {
valor <- valor + 2^(l - pos) * bits[pos]
}
return(valor)
}
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_12/Graficas")
ww="C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_12/Graficas/digitos.modelo.csv"
modelos<-read.csv (ww, header=FALSE, stringsAsFactors=F)
modelos[modelos=='n'] <- 90.95
modelos[modelos=='g'] <- 0.92
modelos[modelos=='b'] <- 0.002
r <-5
c <- 3
dim <- r * c
tasa <- 0.15
tranqui <- 0.99
tope <- 18
digitos <- 0:tope
k <- length(digitos)
contadores <- matrix(rep(0, k*(k+1)), nrow=k, ncol=(k+1))
rownames(contadores) <- 0:tope
colnames(contadores) <- c(0:tope, NA)
n <- floor(log(k-1, 2)) + 1
neuronas <- matrix(runif(n * dim), nrow=n, ncol=dim) # perceptrones
dat<-list()
prueba<-c(300)
#prueba<-c(3,5)
cluster <- makeCluster(detectCores() - 1)
dat14<-data.frame()
for ( h in 1:5){
tinicial<-0
tinicial<-Sys.time()
for (t in 1:5000) { # entrenamiento
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,]
correcto <- binario(d, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
if (deseada != resultado) {
ajuste <- tasa * (deseada - resultado)
tasa <- tranqui * tasa
neuronas[i,] <- w + ajuste * pixeles
}
}
}
clusterExport(cluster, c("neuronas", "n", "decimal", "k", "dim", "contadores", "modelos", "resultado","binario",  "deseada","tope"))
#for ( kt in prueba) {
# clusterExport(cluster,"kt")
ti<- parSapply(cluster, 1:300, function(t1) {
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,] # fila 1 contiene el cero, etc.
correcto <- decimal(binario(d, n),n)
salida <- rep(FALSE, n)
#clusterExport(cluster, c("pixeles","correcto","salida", "d","n","neuronas", "contadores"))
for ( i in 1:n){
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
salida[i] <- resultado
}
r <- min(decimal(salida, n), k) # todos los no-existentes van al final
# contadores[d+1, r+1] <- contadores[d+1, r+1] + 1
return(r==correcto)
})
ag<-as.numeric(ti)
aciertos<-sum(ag)/300
tfinal<-Sys.time()
dat14<-rbind(dat14,c(h,1, aciertos))
}
stopCluster(cluster)
dat14
##############################################################################
###                          Practica 12. REd Neuronal                      ##
###                                                                         ##
###                     28/10/2017                                          ##
###                                                                         ##
##############################################################################
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_12/Graficas")
#file.remove(list.files(pattern=".png"))
#rm(list=ls())
#gc(TRUE)
library(parallel)
library(magick)
binario <- function(d, l) {
b <- rep(FALSE, l)
while (l > 0 | d > 0) {
b[l] <- (d %% 2 == 1)
l <- l - 1
d <- bitwShiftR(d, 1)
}
return(b)
}
decimal <- function(bits, l) {
valor <- 0
for (pos in 1:l) {
valor <- valor + 2^(l - pos) * bits[pos]
}
return(valor)
}
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_12/Graficas")
ww="C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_12/Graficas/digitos.modelo.csv"
modelos<-read.csv (ww, header=FALSE, stringsAsFactors=F)
modelos[modelos=='n'] <- 90.95
modelos[modelos=='g'] <- 0.92
modelos[modelos=='b'] <- 0.002
r <-5
c <- 3
dim <- r * c
tasa <- 0.15
tranqui <- 0.99
tope <- 18
digitos <- 0:tope
k <- length(digitos)
contadores <- matrix(rep(0, k*(k+1)), nrow=k, ncol=(k+1))
rownames(contadores) <- 0:tope
colnames(contadores) <- c(0:tope, NA)
n <- floor(log(k-1, 2)) + 1
neuronas <- matrix(runif(n * dim), nrow=n, ncol=dim) # perceptrones
dat<-list()
prueba<-c(300)
#prueba<-c(3,5)
cluster <- makeCluster(detectCores() - 1)
dat14<-data.frame()
for ( h in 1:5){
tinicial<-0
tinicial<-Sys.time()
for (t in 1:5000) { # entrenamiento
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,]
correcto <- binario(d, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
if (deseada != resultado) {
ajuste <- tasa * (deseada - resultado)
tasa <- tranqui * tasa
neuronas[i,] <- w + ajuste * pixeles
}
}
}
clusterExport(cluster, c("neuronas", "n", "decimal", "k", "dim", "contadores", "modelos", "resultado","binario",  "deseada","tope"))
#for ( kt in prueba) {
# clusterExport(cluster,"kt")
ti<- parSapply(cluster, 1:300, function(t1) {
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,] # fila 1 contiene el cero, etc.
correcto <- decimal(binario(d, n),n)
salida <- rep(FALSE, n)
#clusterExport(cluster, c("pixeles","correcto","salida", "d","n","neuronas", "contadores"))
for ( i in 1:n){
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
salida[i] <- resultado
}
r <- min(decimal(salida, n), k) # todos los no-existentes van al final
# contadores[d+1, r+1] <- contadores[d+1, r+1] + 1
return(r==correcto)
})
ag<-as.numeric(ti)
aciertos<-sum(ag)/300
tfinal<-Sys.time()
dat14<-rbind(dat14,c(h,1, aciertos))
}
